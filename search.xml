<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>责任链模式</title>
    <url>/2021/10/01/Chain%20of%20Responsibility/</url>
    <content><![CDATA[<h1 id="责任链模式（职责链模式、命令链）"><a href="#责任链模式（职责链模式、命令链）" class="headerlink" title="责任链模式（职责链模式、命令链）"></a>责任链模式（职责链模式、命令链）</h1><p>责任链模式是一种行为设计模式，允许你将请求沿着处理者链进行发送。收到请求后，每个处理者均可对请求进行处理，或将其传递给链上的下个处理者。</p>
<p><strong>责任链模式结构</strong></p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/chain-of-responsibility/structure-indexed.png" width="60%">


<ol>
<li>处理者（Handler）声明了所有具体处理者的通用接口。该接口通常仅包含单个方法用于请求处理，但有时其还会包含一个设置链上下个处理者的方法。</li>
<li>基础处理者（Base Handler）是一个可选的类，你可以将所有处理者共用的样本代码放置在其中。通常情况下，该类中定义了一个保存对于下个处理者引用的成员变量。客户端可通过将处理者传递给上个处理者的构造函数或设定方法来创建链。该类还可以实现默认的处理行为：确定下个处理者存在后再将请求传递给它。</li>
<li>具体处理者（Concrete Handlers）包含处理请求的实际代码。每个处理者接收到请求后，都必须决定是否进行处理，以及是否沿着链传递请求。处理者通常是独立且不可变的，需要通过构造函数一次性地获得所有必要的数据。</li>
<li>客户端（Client）可根据程序逻辑一次性或者动态地生成链。值得注意的是，请求可发送给链上的任意一个处理者，而非必须是第一个处理者。</li>
</ol>
<hr>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>在本例中，责任链模式负责为活动的GUI元素显示上下文帮助信息。</p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/chain-of-responsibility/example-zh.png" width="60%">


<p>GUI类使用组合模式生成。每个元素都链接到自己的容器元素。可随时构建从当前元素开始的、遍历其所有容器的元素链。</p>
<p>应用程序的GUI通常为对象树结构。例如，负责渲染程序主窗口的对话框类就是对象树的根节点。对话框包含面板，而面板可能包含其他面板，或是按钮和文本框等下层元素。只要给一个简单的组件指定帮助文本，它就可显示简短的上下文提示。但更复杂的组件可自定义上下文帮助文本的显示方式，例如显示手册摘录内容或在浏览器中打开一个网页。当用户将鼠标指针移动到某个元素并按下F1键时，程序检测到指针下的组件并对其发送帮助请求。该请求不断向上传递到该元素所有的容器，直至某个元素能够显示帮助信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 处理者接口声明了一个创建处理者链的方法。还声明了一个执行请求的方法。</span><br><span class="line">interface ComponentWithContextualHelp is</span><br><span class="line">    method showHelp()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 简单组件的基础类。</span><br><span class="line">abstract class Component implements ComponentWithContextualHelp is</span><br><span class="line">    field tooltipText: string</span><br><span class="line"></span><br><span class="line">    // 组件容器在处理者链中作为“下一个”链接。</span><br><span class="line">    protected field container: Container</span><br><span class="line"></span><br><span class="line">    // 如果组件设定了帮助文字，那它将会显示提示信息。如果组件没有帮助文字</span><br><span class="line">    // 且其容器存在，那它会将调用传递给容器。</span><br><span class="line">    method showHelp() is</span><br><span class="line">        if (tooltipText != null)</span><br><span class="line">            // 显示提示信息。</span><br><span class="line">        else</span><br><span class="line">            container.showHelp()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 容器可以将简单组件和其他容器作为其子项目。链关系将在这里建立。该类将从</span><br><span class="line">// 其父类处继承 showHelp（显示帮助）的行为。</span><br><span class="line">abstract class Container extends Component is</span><br><span class="line">    protected field children: array of Component</span><br><span class="line"></span><br><span class="line">    method add(child) is</span><br><span class="line">        children.add(child)</span><br><span class="line">        child.container = this</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 原始组件应该能够使用帮助操作的默认实现...</span><br><span class="line">class Button extends Component is</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">// 但复杂组件可能会对默认实现进行重写。如果无法以新的方式来提供帮助文字，</span><br><span class="line">// 那组件总是还能调用基础实现的（参见 Component 类）。</span><br><span class="line">class Panel extends Container is</span><br><span class="line">    field modalHelpText: string</span><br><span class="line"></span><br><span class="line">    method showHelp() is</span><br><span class="line">        if (modalHelpText != null)</span><br><span class="line">            // 显示包含帮助文字的模态窗口。</span><br><span class="line">        else</span><br><span class="line">            super.showHelp()</span><br><span class="line"></span><br><span class="line">// ...同上...</span><br><span class="line">class Dialog extends Container is</span><br><span class="line">    field wikiPageURL: string</span><br><span class="line"></span><br><span class="line">    method showHelp() is</span><br><span class="line">        if (wikiPageURL != null)</span><br><span class="line">            // 打开百科帮助页面。</span><br><span class="line">        else</span><br><span class="line">            super.showHelp()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 客户端代码。</span><br><span class="line">class Application is</span><br><span class="line">    // 每个程序都能以不同方式对链进行配置。</span><br><span class="line">    method createUI() is</span><br><span class="line">        dialog = new Dialog(&quot;预算报告&quot;)</span><br><span class="line">        dialog.wikiPageURL = &quot;http://...&quot;</span><br><span class="line">        panel = new Panel(0, 0, 400, 800)</span><br><span class="line">        panel.modalHelpText = &quot;本面板用于...&quot;</span><br><span class="line">        ok = new Button(250, 760, 50, 20, &quot;确认&quot;)</span><br><span class="line">        ok.tooltipText = &quot;这是一个确认按钮...&quot;</span><br><span class="line">        cancel = new Button(320, 760, 50, 20, &quot;取消&quot;)</span><br><span class="line">        // ...</span><br><span class="line">        panel.add(ok)</span><br><span class="line">        panel.add(cancel)</span><br><span class="line">        dialog.add(panel)</span><br><span class="line"></span><br><span class="line">    // 想象这里会发生什么。</span><br><span class="line">    method onF1KeyPress() is</span><br><span class="line">        component = this.getComponentAtMouseCoords()</span><br><span class="line">        component.showHelp()</span><br></pre></td></tr></table></figure>


<h3 id="责任链模式的应用"><a href="#责任链模式的应用" class="headerlink" title="责任链模式的应用"></a>责任链模式的应用</h3><ol>
<li>使用场景</li>
</ol>
<ul>
<li>当程序需要使用不同方式处理不同种类请求，而且请求类型和顺序预先未知时，可以使用责任链模式。该模式能将多个处理者连接成一条链。接收到请求后，它会“询问”每个处理者是否能够对其进行处理。这样所有处理者都有机会来处理请求。</li>
<li>当必须按顺序执行多个处理者时，可以使用该模式。无论你以何种顺序将处理者连接成一条链，所有请求都会严格按照顺序通过链上的处理者。</li>
<li>如果所需处理者及其顺序必须在运行时进行改变，可以使用责任链模式。如果在处理者类中有对引用成员变量的设定方法，你将能动态地插入和移除处理者，或者改变其顺序。</li>
</ul>
<ol start="2">
<li>实现方式</li>
</ol>
<ul>
<li>声明处理者接口并描述请求处理方法的签名。确定客户端如何将请求数据传递给方法。最灵活的方式是将请求转换为对象，然后将其以参数的形式传递给处理函数。</li>
<li>为了在具体处理者中消除重复的样本代码，你可以根据处理者接口创建抽象处理者基类。该类需要有一个成员变量来存储指向链上下个处理者的引用。你可以将其设置为不可变类。但如果你打算在运行时对链进行改变，则需要定义一个设定方法来修改引用成员变量的值。为了使用方便，你还可以实现处理方法的默认行为。如果还有剩余对象，该方法会将请求传递给下个对象。具体处理者还能够通过调用父类对象的方法来使用这一行为。</li>
<li>一次创建具体处理者子类并实现其处理方法。每个处理者在接收到请求后都必须做出两个决定：是否自行处理这个请求，是否将该请求沿着链进行传递。</li>
<li>客户端可以自行组装链，或者从其他对象处获得预先组装好的链。在后一种情况下，你必须实现工厂类以根据配置或环境设置来创建链。</li>
<li>客户端可以触发链中的任意处理者，而不仅仅是第一个。请求将通过连进行传递，直至某个处理者拒绝继续传递，或者请求到达链尾。</li>
<li>由于链的动态性，客户端需要准备好处理一下情况：链中可能只有单个链接、部分请求可能无法到达链尾、其他请求可能直到链尾都未被处理。</li>
</ul>
<ol start="3">
<li>优点</li>
</ol>
<ul>
<li>可以控制请求处理的顺序。</li>
<li>单一职责原则。你可对发起操作和执行操作的类进行解耦。</li>
<li>开闭原则。你可以在不更改现有代码的情况下在程序中新增处理者。</li>
</ul>
<ol start="4">
<li>缺点</li>
</ol>
<ul>
<li>部分请求可能未被处理。</li>
</ul>
<h3 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul>
<li>责任链模式、命令模式、中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</li>
</ul>
<ol>
<li>责任链按照顺序将请求动态传递给一系列的潜在接收者，直至其中一名接收者对请求进行处理。</li>
<li>命令在发送者和请求者之间建立单向连接。</li>
<li>中介者清除了发送者和请求者之间的直接连接，强制它们通过一个中介对象进行间接沟通。</li>
<li>观察者允许接收者动态地订阅或取消接受请求。</li>
</ol>
<ul>
<li>责任链通常和组合模式结合使用。在这种情况下，叶组件接收到请求后，可以将请求沿包含全体父组件的链一直传递至对象树的底部。</li>
<li>责任链的管理者可使用命令模式实现。在这种情况下，你可以对由请求代表的同一个上下文对象执行许多不同的操作。还有另外一种实现方式，那就是请求自身就是一个命令对象。在这种情况下，你可以对由一系列不同上下文连接而成的链执行相同的操作。</li>
<li>责任链和装饰模式的类结构非常相似。两者都依赖递归组合将需要执行的操作传递给一系列对象。责任链的管理者可以相互独立地执行一切操作，还可以随时停止传递请求。另一方面，各种装饰可以在遵循基本接口的情况下扩展对象的行为。此外，装饰无法中断请求的传递。</li>
</ul>
]]></content>
      <categories>
        <category>面向对象</category>
        <category>设计模式</category>
        <category>行为模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>连接发送者和接收者</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/2021/10/01/Observer/</url>
    <content><![CDATA[<h1 id="观察者模式（监听者、事件订阅者）"><a href="#观察者模式（监听者、事件订阅者）" class="headerlink" title="观察者模式（监听者、事件订阅者）"></a>观察者模式（监听者、事件订阅者）</h1><p>一种行为设计模式，允许你定义一种订阅机制，可在对象事件发生时通知多个“观察”该对象的其他对象。</p>
<p><strong>观察者模式结构</strong></p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/observer/structure.png?id=365b7e2b8fbecc8948f3" width="60%">


<ol>
<li>发布者（Publisher）会向其他对象发送值得关注的事件。事件会在发布者自身状态改变或执行特定行为后发生。发布者中包含一个允许新订阅者加入和当前订阅者离开列表的订阅架构。</li>
<li>当新事件发生时，发布者会遍历订阅列表并调用每个订阅者对象的通知方法。该方法是在订阅者接口中声明的。</li>
<li>订阅者（Subscriber）接口声明了通知接口。在绝大多数情况下，该接口仅包含一个update更新方法。该方法可以拥有多个参数，使发布者能在更新时传递事件的详细信息。</li>
<li>具体订阅者（Concrete Subscribers）可以执行一些操作来回应发布者的通知。所有具体订阅者类都实现了同样的接口，因此发布者不需要与具体类相耦合。</li>
<li>订阅者通常需要一些上下文信息来正确的处理更新。因此，发布者通常会将一些上下文数据作为通知方法的参数进行传递。发布者也 可将自身作为参数进行传递，时订阅者直接获取所需的数据。</li>
<li>客户端（Client）会分别创建发布者和订阅者对象，然后为订阅者注册发布者更新。</li>
</ol>
<hr>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>在本例中，观察者模式允许文本编辑器对象将自身的状态改变通知给其他服务对象。</p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/observer/example.png" width="60%">


<p>订阅者列表是动态生成的：对象可在运行时根据程序需要开始或停止监听通知。在本实现中，编辑器类自身并不维护订阅列表。它将工作委派给专门从事此工作的一个特殊帮手对象。你还可将该对象升级为中心化的事件分发器，允许任何对象成为发布者。只要发布者通过同样的接口与所有订阅者进行交互，那么在程序中新增订阅者时就无需修改已有发布者类的代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 发布者基类包含订阅管理代码和通知方法。</span><br><span class="line">class EventManager is</span><br><span class="line">    private field listeners: hash map of event types and listeners</span><br><span class="line"></span><br><span class="line">    method subscribe(eventType, listener) is</span><br><span class="line">        listeners.add(eventType, listener)</span><br><span class="line"></span><br><span class="line">    method unsubscribe(eventType, listener) is</span><br><span class="line">        listeners.remove(eventType, listener)</span><br><span class="line"></span><br><span class="line">    method notify(eventType, data) is</span><br><span class="line">        foreach (listener in listeners.of(eventType)) do</span><br><span class="line">            listener.update(data)</span><br><span class="line"></span><br><span class="line">// 具体发布者包含一些订阅者感兴趣的实际业务逻辑。我们可以从发布者基类中扩</span><br><span class="line">// 展出该类，但在实际情况下并不总能做到，因为具体发布者可能已经是子类了。</span><br><span class="line">// 在这种情况下，你可用组合来修补订阅逻辑，就像我们在这里做的一样。</span><br><span class="line">class Editor is</span><br><span class="line">    public field events: EventManager</span><br><span class="line">    private field file: File</span><br><span class="line"></span><br><span class="line">    constructor Editor() is</span><br><span class="line">        events = new EventManager()</span><br><span class="line"></span><br><span class="line">    // 业务逻辑的方法可将变化通知给订阅者。</span><br><span class="line">    method openFile(path) is</span><br><span class="line">        this.file = new File(path)</span><br><span class="line">        events.notify(&quot;open&quot;, file.name)</span><br><span class="line"></span><br><span class="line">    method saveFile() is</span><br><span class="line">        file.write()</span><br><span class="line">        events.notify(&quot;save&quot;, file.name)</span><br><span class="line"></span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 这里是订阅者接口。如果你的编程语言支持函数类型，则可用一组函数来代替整</span><br><span class="line">// 个订阅者的层次结构。</span><br><span class="line">interface EventListener is</span><br><span class="line">    method update(filename)</span><br><span class="line"></span><br><span class="line">// 具体订阅者会对其注册的发布者所发出的更新消息做出响应。</span><br><span class="line">class LoggingListener implements EventListener is</span><br><span class="line">    private field log: File</span><br><span class="line">    private field message</span><br><span class="line"></span><br><span class="line">    constructor LoggingListener(log_filename, message) is</span><br><span class="line">        this.log = new File(log_filename)</span><br><span class="line">        this.message = message</span><br><span class="line"></span><br><span class="line">    method update(filename) is</span><br><span class="line">        log.write(replace(&#x27;%s&#x27;,filename,message))</span><br><span class="line"></span><br><span class="line">class EmailAlertsListener implements EventListener is</span><br><span class="line">    private field email: string</span><br><span class="line"></span><br><span class="line">    constructor EmailAlertsListener(email, message) is</span><br><span class="line">        this.email = email</span><br><span class="line">        this.message = message</span><br><span class="line"></span><br><span class="line">    method update(filename) is</span><br><span class="line">        system.email(email, replace(&#x27;%s&#x27;,filename,message))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 应用程序可在运行时配置发布者和订阅者。</span><br><span class="line">class Application is</span><br><span class="line">    method config() is</span><br><span class="line">        editor = new Editor()</span><br><span class="line"></span><br><span class="line">        logger = new LoggingListener(</span><br><span class="line">            &quot;/path/to/log.txt&quot;,</span><br><span class="line">            &quot;有人打开了文件：%s&quot;);</span><br><span class="line">        editor.events.subscribe(&quot;open&quot;, logger)</span><br><span class="line"></span><br><span class="line">        emailAlerts = new EmailAlertsListener(</span><br><span class="line">            &quot;admin@example.com&quot;,</span><br><span class="line">            &quot;有人更改了文件：%s&quot;)</span><br><span class="line">        editor.events.subscribe(&quot;save&quot;, emailAlerts)</span><br></pre></td></tr></table></figure>

<h3 id="观察者模式的应用"><a href="#观察者模式的应用" class="headerlink" title="观察者模式的应用"></a>观察者模式的应用</h3><ol>
<li>使用场景</li>
</ol>
<ul>
<li>当一个对象状态的改变需要改变其他对象，或实际对象是事先未知的或动态变化的时，可使用观察者模式。当你使用图形用户界面类时通常会遇到一个问题，比如，你创建了自定义按钮类并允许客户端在按钮中注入自定义代码，这样当用户按下按钮时就会触发这些代码。观察者模式允许任何实现了订阅者接口的对象订阅发布者对象的事件通知。你可在按钮中添加订阅机制，允许客户端通过自定义订阅类注入自定义代码。</li>
<li>当应用中的一些对象必须观察其他对象时，可使用该模式。但仅能在有限时间内或特定情况下使用。订阅列表是动态的，因此订阅者可随时加入或离开该列表。</li>
</ul>
<ol start="2">
<li>实现方式</li>
</ol>
<ul>
<li>仔细检查你的业务逻辑，试着将其拆分为两个部分：独立于其他代码的核心功能将作为发布者；其他代码则转化为一组订阅类。</li>
<li>声明订阅者接口。该接口至少有一个update方法。</li>
<li>声明发布者接口并定义一些接口来在列表中添加和删除订阅对象。记住发布者必须仅通过订阅者接口与它们进行交互。</li>
<li>确定存放实际订阅列表的位置并实现订阅方法。通常所有类型的发布者代码看上去都一样，因此将列表放置在直接扩展自发布者接口的抽象类中是显而易见的。具体发布者会扩展该类从而继承所有的订阅行为。但是，如果你需要在现有的类层次结构中应用该模式，则可以考虑使用组合的方式：将订阅逻辑放入一个独立的对象，然后让所有实际订阅者使用该对象。</li>
<li>创建具体发布者类。每次发布者发生了重要事件时都必须通知所有的订阅者。</li>
<li>在具体订阅者类中实现通知更新的方法。绝大部分订阅者需要一些与事件相关的上下文数据。这些数据可作为通知方法的参数来传递。但还有另一种选择。订阅者接收到通知后直接从通知中获取所以数据。在这种情况下，发布者必须通过更新方法将自身传递出去。另一种不太灵活的方式是通过构造函数将发布者与订阅者永久性地连接起来。</li>
<li>客户端必须生成所需的全部订阅者，并在相应的发布者处完成注册工作。</li>
</ul>
<ol start="3">
<li>优点</li>
</ol>
<ul>
<li>开闭原则。无需修改发布者代码就能引入新的订阅者类（如果是发布者接口则可轻松引入发布者类）。</li>
<li>可以在运行时建立对象间的联系</li>
</ul>
<ol start="4">
<li>缺点</li>
</ol>
<ul>
<li>订阅者的通知顺序是随机的</li>
</ul>
<h3 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul>
<li>责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</li>
<li>责任链按照顺序将请求动态传递给一系列的潜在接收者， 直至其中一名接收者对请求进行处理。</li>
<li>命令在发送者和请求者之间建立单向连接。</li>
<li>中介者清除了发送者和请求者之间的直接连接， 强制它们通过一个中介对象进行间接沟通。</li>
<li>观察者允许接收者动态地订阅或取消接收请求。</li>
<li>中介者和观察者之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</li>
<li>中介者的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 观察者的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</li>
<li>有一种流行的中介者模式实现方式依赖于观察者。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当中介者以这种方式实现时， 它可能看上去与观察者非常相似。</li>
<li>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和观察者并不相同， 但这仍是一种中介者模式。</li>
<li>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</li>
</ul>
]]></content>
      <categories>
        <category>面向对象</category>
        <category>设计模式</category>
        <category>行为模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>连接发送者和接收者</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/2021/10/01/Intermediary/</url>
    <content><![CDATA[<h1 id="中介者模式（调解人、控制器）"><a href="#中介者模式（调解人、控制器）" class="headerlink" title="中介者模式（调解人、控制器）"></a>中介者模式（调解人、控制器）</h1><ul>
<li>中介者模式是一种行为设计模式，能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使他们通过一个中介者对象进行合作。</li>
</ul>
<p><strong>中介者模式结构</strong></p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/mediator/structure-indexed-2x.png" width="60%">


<ol>
<li>组件（Component）是各种包含业务逻辑的类。每个组件都有一个指向中介者的引用，该引用被声明为中介者接口类型。组件不知道中介者实际所属的类，因此可以通过将其连接到不同的中介者以使其能在其他程序中复用。</li>
<li>中介者（Mediator）接口声明了与组件交流的方法，但通常仅包括一个通知方法。组件可以将任意上下文（包括自己的对象）作为该方法的参数，只有这样接受组件和发送者类之间才不会耦合。</li>
<li>具体中介者（Concrete Mediator）封装了多种组件间的关系。具体中介者通常会保存所有组件的引用并对其进行管理，甚至有时候会对其生命周期进行管理。</li>
<li>组件并不知道其他组件的情况。如果组件内发生了重要事件，它只能通知中介者。中介者收到通知后能轻易地确定发送者，这或许已足以判断接下来需要触发的组件了。对于组件来说，中介者看上去完全就是一个黑箱。发送者不知道最终会由谁来处理自己的请求，接收者也不知道最初是谁发出了请求。</li>
</ol>
<hr>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>在本例中， 中介者模式可帮助你减少各种 UI 类 （按钮、 复选框和文本标签） 之间的相互依赖关系。</p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/mediator/example.png" width="60%">


<p>用户触发的元素不会直接与其他元素交流， 即使看上去它们应该这样做。 相反， 元素只需让中介者知晓事件即可， 并能在发出通知时同时传递任何上下文信息。</p>
<p>本例中的中介者是整个认证对话框。 对话框知道具体元素应如何进行合作并促进它们的间接交流。 当接收到事件通知后， 对话框会确定负责处理事件的元素并据此重定向请求。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 中介者接口声明了一个能让组件将各种事件通知给中介者的方法。中介者可对这</span><br><span class="line">// 些事件做出响应并将执行工作传递给其他组件。</span><br><span class="line">interface Mediator is</span><br><span class="line">    method notify(sender: Component, event: string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 具体中介者类可解开各组件之间相互交叉的连接关系并将其转移到中介者中。</span><br><span class="line">class AuthenticationDialog implements Mediator is</span><br><span class="line">    private field title: string</span><br><span class="line">    private field loginOrRegisterChkBx: Checkbox</span><br><span class="line">    private field loginUsername, loginPassword: Textbox</span><br><span class="line">    private field registrationUsername, registrationPassword,</span><br><span class="line">                  registrationEmail: Textbox</span><br><span class="line">    private field okBtn, cancelBtn: Button</span><br><span class="line"></span><br><span class="line">    constructor AuthenticationDialog() is</span><br><span class="line">        // 创建所有组件对象并将当前中介者传递给其构造函数以建立连接。</span><br><span class="line"></span><br><span class="line">    // 当组件中有事件发生时，它会通知中介者。中介者接收到通知后可自行处理，</span><br><span class="line">    // 也可将请求传递给另一个组件。</span><br><span class="line">    method notify(sender, event) is</span><br><span class="line">        if (sender == loginOrRegisterChkBx and event == &quot;check&quot;)</span><br><span class="line">            if (loginOrRegisterChkBx.checked)</span><br><span class="line">                title = &quot;登录&quot;</span><br><span class="line">                // 1. 显示登录表单组件。</span><br><span class="line">                // 2. 隐藏注册表单组件。</span><br><span class="line">            else</span><br><span class="line">                title = &quot;注册&quot;</span><br><span class="line">                // 1. 显示注册表单组件。</span><br><span class="line">                // 2. 隐藏登录表单组件。</span><br><span class="line"></span><br><span class="line">        if (sender == okBtn &amp;&amp; event == &quot;click&quot;)</span><br><span class="line">            if (loginOrRegister.checked)</span><br><span class="line">                // 尝试找到使用登录信息的用户。</span><br><span class="line">                if (!found)</span><br><span class="line">                    // 在登录字段上方显示错误信息。</span><br><span class="line">            else</span><br><span class="line">                // 1. 使用注册字段中的数据创建用户账号。</span><br><span class="line">                // 2. 完成用户登录工作。 …</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 组件会使用中介者接口与中介者进行交互。因此只需将它们与不同的中介者连接</span><br><span class="line">// 起来，你就能在其他情境中使用这些组件了。</span><br><span class="line">class Component is</span><br><span class="line">    field dialog: Mediator</span><br><span class="line"></span><br><span class="line">    constructor Component(dialog) is</span><br><span class="line">        this.dialog = dialog</span><br><span class="line"></span><br><span class="line">    method click() is</span><br><span class="line">        dialog.notify(this, &quot;click&quot;)</span><br><span class="line"></span><br><span class="line">    method keypress() is</span><br><span class="line">        dialog.notify(this, &quot;keypress&quot;)</span><br><span class="line"></span><br><span class="line">// 具体组件之间无法进行交流。它们只有一个交流渠道，那就是向中介者发送通知。</span><br><span class="line">class Button extends Component is</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">class Textbox extends Component is</span><br><span class="line">    // ...</span><br><span class="line"></span><br><span class="line">class Checkbox extends Component is</span><br><span class="line">    method check() is</span><br><span class="line">        dialog.notify(this, &quot;check&quot;)</span><br><span class="line">    // ...</span><br></pre></td></tr></table></figure>


<h3 id="中介者模式的应用"><a href="#中介者模式的应用" class="headerlink" title="中介者模式的应用"></a>中介者模式的应用</h3><ol>
<li>使用场景</li>
</ol>
<ul>
<li>当一些对象和其他对象紧密耦合以致难以对其进行修改时，可使用中介者模式。-该模式让你将对象间的所有关系抽取成为一个单独的类，以致对于特定组件的修改工作独立于其他组件。</li>
<li>当组件因过于依赖其他组件而无法在不同应用中复用时，可使用中介者模式。-应用中介者模式后，每个组件不再知晓其他组件的情况。尽管这些组件无法直接交流，但它们仍可通过中介者对象进行间接交流。如果希望在不同应用中复用一个组件，则需要为其提供一个新的中介者类。</li>
<li>如果为了能在不同情景下复用一些基本行为，导致你需要被迫创建大量组件子类时，可使用中介者模式。-由于所有组件间关系都被包含在中介者中，因此无需修改组件就能方便地新建中介者类以定义新的组件合作方式。</li>
</ul>
<ol start="2">
<li>实现方式</li>
</ol>
<ul>
<li>找到一组当前紧密耦合，且提供其独立性能带来更大好处的类（例如更易于维护或更方便复用）。</li>
<li>声明中介者接口并描述中介者和各种组件之间所需的交流接口。在绝大多数情况下，一个接收组件通知的方法就足够了。如果希望在不同场景下复用组件类，那么该接口将非常重要。只要组件类使用通过接口与其中介者合作，就能将该组件与不同实现中的中介者进行连接。</li>
<li>实现具体中介者类。该类可从自行保存其下所有组件的引用中受益。</li>
<li>你可以更进一步，让中介者负责组件对象的创建和销毁。此后，中介者可能会与工厂或外观模式类似。</li>
<li>组件必须保存对于中介者对象的引用。该连接通常在组件的构造函数中建立，该函数会将中介者对象作为参数传递。</li>
<li>修改组件代码，使其可调用中介者的通知方法，而非其他组件的方法。然后将调用其他组建的代码抽取到中介者类中，并在中介者接收到该组件通知时执行这些代码。</li>
</ul>
<ol start="3">
<li>优点</li>
</ol>
<ul>
<li>单一职责原则。可以将多个组件间的交流抽取到同一位置，使其更易于理解和维护。</li>
<li>开闭原则。无需修改实际组件就能增加新的中介者。</li>
<li>可以减轻应用中多个组件间的耦合情况。</li>
<li>可以更方便的复用各个组件。</li>
</ul>
<ol start="4">
<li>缺点</li>
</ol>
<ul>
<li>一段时间后，中介者可能会演化成为上帝对象。</li>
</ul>
<h3 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul>
<li>责任链模式、 命令模式、 中介者模式和观察者模式用于处理请求发送者和接收者之间的不同连接方式：</li>
<li>责任链按照顺序将请求动态传递给一系列的潜在接收者，直至其中一名接收者对请求进行处理。</li>
<li>命令在发送者和请求者之间建立单向连接。</li>
<li>中介者清除了发送者和请求者之间的直接连接，强制它们通过一个中介对象进行间接沟通。</li>
<li>观察者允许接收者动态地订阅或取消接收请求。</li>
<li>外观模式和中介者的职责类似： 它们都尝试在大量紧密耦合的类中组织起合作。</li>
<li>外观为子系统中的所有对象定义了一个简单接口， 但是它不提供任何新功能。 子系统本身不会意识到外观的存在。 子系统中的对象可以直接进行交流。</li>
<li>中介者将系统中组件的沟通行为中心化。 各组件只知道中介者对象， 无法直接相互交流。</li>
<li>中介者和观察者之间的区别往往很难记住。 在大部分情况下， 你可以使用其中一种模式， 而有时可以同时使用。 让我们来看看如何做到这一点。</li>
<li>中介者的主要目标是消除一系列系统组件之间的相互依赖。 这些组件将依赖于同一个中介者对象。 观察者的目标是在对象之间建立动态的单向连接， 使得部分对象可作为其他对象的附属发挥作用。</li>
<li>有一种流行的中介者模式实现方式依赖于观察者。 中介者对象担当发布者的角色， 其他组件则作为订阅者， 可以订阅中介者的事件或取消订阅。 当中介者以这种方式实现时， 它可能看上去与观察者非常相似。</li>
<li>当你感到疑惑时， 记住可以采用其他方式来实现中介者。 例如， 你可永久性地将所有组件链接到同一个中介者对象。 这种实现方式和观察者并不相同， 但这仍是一种中介者模式。</li>
<li>假设有一个程序， 其所有的组件都变成了发布者， 它们之间可以相互建立动态连接。 这样程序中就没有中心化的中介者对象， 而只有一些分布式的观察者。</li>
</ul>
]]></content>
      <categories>
        <category>面向对象</category>
        <category>设计模式</category>
        <category>行为模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>连接发送者和接收者</tag>
      </tags>
  </entry>
  <entry>
    <title>module</title>
    <url>/2021/09/30/module/</url>
    <content><![CDATA[<h1 id="这是一个写作模板"><a href="#这是一个写作模板" class="headerlink" title="这是一个写作模板"></a>这是一个写作模板</h1><ul>
<li>对应文件夹同名</li>
</ul>
]]></content>
      <categories>
        <category>其它</category>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模板</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/2021/10/01/Command/</url>
    <content><![CDATA[<h1 id="命令模式（动作、事务）"><a href="#命令模式（动作、事务）" class="headerlink" title="命令模式（动作、事务）"></a>命令模式（动作、事务）</h1><p>命令模式是一种行为设计模式，它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作。</p>
<p><strong>命令模式结构</strong></p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/command/structure-indexed.png" width="60%">


<ol>
<li>发送者（Sender）–亦称触发者（Invoker）–类负责对请求进行初始化，其中必须包含一个成员变量来存储对于命令对象的引用。发送者触发命令，而不向接收者直接发送请求。注意，发送者并不负责创建命令对象：它通常会通过构造函数从客户端处获得预先生成的命令。</li>
<li>命令（Command）接口通常仅声明一个执行命令的方法。</li>
<li>具体命令（Concrete Commands）会实现各种类型的请求。具体命令自身并不完成工作，而是会将调用委派给一个业务逻辑对象。但为了简化代码，这些类可以进行合并。接收对象执行方法所需要的参数可以声明为具体命令的成员变量。你可以将命令对象设为不可变，仅允许通过构造函数对这些成员变量进行初始化。</li>
<li>接收者（Receiver）类包含部分业务逻辑。几乎任何对象都可以作为接收者。绝大部分命令只处理如何将请求传递到接收者的细节，接收者自己会完成实际的工作。</li>
<li>客户端（Client）会创建并配置具体命令对象。客户端必须将包括接收者实体在内的所有请求参数传递给命令的构造函数。此后，生成的命令就可以与一个或多个发送者相关联了。</li>
</ol>
<hr>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>在本例中，命令模式会记录已执行操作的历史记录，以在需要时撤销操作。</p>
<img src="https://refactoringguru.cn/images/patterns/diagrams/command/example.png" width="60%">


<p>有些命令会改变编辑器的状态，例如剪切和粘贴，它们可在执行相关操作前对编辑器的状态进行备份。命令执行后会和当前点备份的编辑器状态一起被放入命令历史（命令对象栈）。此后，如果用户需要进行回滚操作，程序可从历史记录中取出最近的命令，读取相应的编辑器状态备份，然后进行恢复。</p>
<p>客户端代码（GUI 元素和命令历史等）没有和具体命令类相耦合，因为它通过命令接口来使用命令。这使得你能在无需修改已有代码的情况下在程序中增加新的命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 命令基类会为所有具体命令定义通用接口。</span><br><span class="line">abstract class Command is</span><br><span class="line">    protected field app: Application</span><br><span class="line">    protected field editor: Editor</span><br><span class="line">    protected field backup: text</span><br><span class="line"></span><br><span class="line">    constructor Command(app: Application, editor: Editor) is</span><br><span class="line">        this.app = app</span><br><span class="line">        this.editor = editor</span><br><span class="line"></span><br><span class="line">    // 备份编辑器状态。</span><br><span class="line">    method saveBackup() is</span><br><span class="line">        backup = editor.text</span><br><span class="line"></span><br><span class="line">    // 恢复编辑器状态。</span><br><span class="line">    method undo() is</span><br><span class="line">        editor.text = backup</span><br><span class="line"></span><br><span class="line">    // 执行方法被声明为抽象以强制所有具体命令提供自己的实现。该方法必须根</span><br><span class="line">    // 据命令是否更改编辑器的状态返回 true 或 false。</span><br><span class="line">    abstract method execute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 这里是具体命令。</span><br><span class="line">class CopyCommand extends Command is</span><br><span class="line">    // 复制命令不会被保存到历史记录中，因为它没有改变编辑器的状态。</span><br><span class="line">    method execute() is</span><br><span class="line">        app.clipboard = editor.getSelection()</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line">class CutCommand extends Command is</span><br><span class="line">    // 剪切命令改变了编辑器的状态，因此它必须被保存到历史记录中。只要方法</span><br><span class="line">    // 返回 true，它就会被保存。</span><br><span class="line">    method execute() is</span><br><span class="line">        saveBackup()</span><br><span class="line">        app.clipboard = editor.getSelection()</span><br><span class="line">        editor.deleteSelection()</span><br><span class="line">        return true</span><br><span class="line"></span><br><span class="line">class PasteCommand extends Command is</span><br><span class="line">    method execute() is</span><br><span class="line">        saveBackup()</span><br><span class="line">        editor.replaceSelection(app.clipboard)</span><br><span class="line">        return true</span><br><span class="line"></span><br><span class="line">// 撤销操作也是一个命令。</span><br><span class="line">class UndoCommand extends Command is</span><br><span class="line">    method execute() is</span><br><span class="line">        app.undo()</span><br><span class="line">        return false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 全局命令历史记录就是一个堆桟。</span><br><span class="line">class CommandHistory is</span><br><span class="line">    private field history: array of Command</span><br><span class="line"></span><br><span class="line">    // 后进...</span><br><span class="line">    method push(c: Command) is</span><br><span class="line">        // 将命令压入历史记录数组的末尾。</span><br><span class="line"></span><br><span class="line">    // ...先出</span><br><span class="line">    method pop():Command is</span><br><span class="line">        // 从历史记录中取出最近的命令。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 编辑器类包含实际的文本编辑操作。它会担任接收者的角色：最后所有命令都会</span><br><span class="line">// 将执行工作委派给编辑器的方法。</span><br><span class="line">class Editor is</span><br><span class="line">    field text: string</span><br><span class="line"></span><br><span class="line">    method getSelection() is</span><br><span class="line">        // 返回选中的文字。</span><br><span class="line"></span><br><span class="line">    method deleteSelection() is</span><br><span class="line">        // 删除选中的文字。</span><br><span class="line"></span><br><span class="line">    method replaceSelection(text) is</span><br><span class="line">        // 在当前位置插入剪贴板中的内容。</span><br><span class="line"></span><br><span class="line">// 应用程序类会设置对象之间的关系。它会担任发送者的角色：当需要完成某些工</span><br><span class="line">// 作时，它会创建并执行一个命令对象。</span><br><span class="line">class Application is</span><br><span class="line">    field clipboard: string</span><br><span class="line">    field editors: array of Editors</span><br><span class="line">    field activeEditor: Editor</span><br><span class="line">    field history: CommandHistory</span><br><span class="line"></span><br><span class="line">    // 将命令分派给 UI 对象的代码可能会是这样的。</span><br><span class="line">    method createUI() is</span><br><span class="line">        // ...</span><br><span class="line">        copy = function() &#123; executeCommand(</span><br><span class="line">            new CopyCommand(this, activeEditor)) &#125;</span><br><span class="line">        copyButton.setCommand(copy)</span><br><span class="line">        shortcuts.onKeyPress(&quot;Ctrl+C&quot;, copy)</span><br><span class="line"></span><br><span class="line">        cut = function() &#123; executeCommand(</span><br><span class="line">            new CutCommand(this, activeEditor)) &#125;</span><br><span class="line">        cutButton.setCommand(cut)</span><br><span class="line">        shortcuts.onKeyPress(&quot;Ctrl+X&quot;, cut)</span><br><span class="line"></span><br><span class="line">        paste = function() &#123; executeCommand(</span><br><span class="line">            new PasteCommand(this, activeEditor)) &#125;</span><br><span class="line">        pasteButton.setCommand(paste)</span><br><span class="line">        shortcuts.onKeyPress(&quot;Ctrl+V&quot;, paste)</span><br><span class="line"></span><br><span class="line">        undo = function() &#123; executeCommand(</span><br><span class="line">            new UndoCommand(this, activeEditor)) &#125;</span><br><span class="line">        undoButton.setCommand(undo)</span><br><span class="line">        shortcuts.onKeyPress(&quot;Ctrl+Z&quot;, undo)</span><br><span class="line"></span><br><span class="line">    // 执行一个命令并检查它是否需要被添加到历史记录中。</span><br><span class="line">    method executeCommand(command) is</span><br><span class="line">        if (command.execute)</span><br><span class="line">            history.push(command)</span><br><span class="line"></span><br><span class="line">    // 从历史记录中取出最近的命令并运行其 undo（撤销）方法。请注意，你并</span><br><span class="line">    // 不知晓该命令所属的类。但是我们不需要知晓，因为命令自己知道如何撤销</span><br><span class="line">    // 其动作。</span><br><span class="line">    method undo() is</span><br><span class="line">        command = history.pop()</span><br><span class="line">        if (command != null)</span><br><span class="line">            command.undo()</span><br></pre></td></tr></table></figure>

<h3 id="命令模式的应用"><a href="#命令模式的应用" class="headerlink" title="命令模式的应用"></a>命令模式的应用</h3><ol>
<li>使用场景</li>
</ol>
<ul>
<li>如果你需要通过操作来参数化对象，可以使用命令模式。命令模式可将特定的方法调用转化为独立对象。这一改变 也带来了许多有趣的应用：你可以将命令作为方法的参数进行传递、将命令保存在其他对象中，或者在运行时切换已连接的命令等。</li>
<li>如果你想要将操作放入队列中、操作的执行或者远程执行操作，可以使用命令模式。同其他对象一样，命令也可以实现序列化，从而能方便的写入文件或数据库中。一段时间后，该字符串可被恢复成为最初的命令对象。因此，你可以延迟或计划命令的执行。还可以将命令放入队列、记录命令或者通过网络发送命令。</li>
<li>如果你想要实现操作回滚功能，可以使用命令模式。为了能够回滚操作，你需要实现已执行操作的历史记录功能。命令历史记录是一种包含所有已执行命令对象及其相关程序状态备份的栈结构。这种方法有两个缺点。首先，程序状态的保存功能并不容易实现，因为部分状态可能是私有的。你可以使用备忘录模式来在一定程度上解决这个问题。其次， 备份状态可能会占用大量内存。因此，有时你需要借助另一种实现方式：命令无需恢复原始状态，而是执行反向操作。反向操作也有代价：它可能会很难甚至是无法实现。</li>
</ul>
<ol start="2">
<li>实现方式</li>
</ol>
<ul>
<li>声明仅有一个执行方法的命令接口。</li>
<li>抽取请求并使之成为实现命令接口的具体命令类。每个类都必须有一组成员变量来保存请求参数和对于实际接收者对象的引用。所有这些变量的数值都必须通过命令构造函数进行初始化。</li>
<li>找到担任发送者职责的类。在这些类中添加保存命令的成员变量。发送者只能通过命令接口与其命令进行交互。发送者自身通常并不创建命令对象，而是通过客户端代码获取。</li>
<li>修改发送者使其执行命令，而非直接将请求发送给接收者。</li>
<li>客户端必须按照以下顺序来初始化对象：创建接收者；创建命令，如有需要可将其关联至接收者；创建发送者并将其与特定命令关联。</li>
</ul>
<ol start="3">
<li>优点</li>
</ol>
<ul>
<li>单一职责原则。你可以解耦触发和执行操作的类。</li>
<li>开闭原则。你可以在不修改已有客户端代码的情况下在程序中创建新的命令。</li>
<li>实现撤销和恢复功能。</li>
<li>实现操作的延迟执行或计划执行。</li>
<li>将一组简单命令组合成一个复杂命令。</li>
</ul>
<ol start="4">
<li>缺点</li>
</ol>
<ul>
<li>代码可能会变得更加复杂，因为你在发送者和接收者之间增加了一个全新的层次</li>
</ul>
<h3 id="与其他模式的关系"><a href="#与其他模式的关系" class="headerlink" title="与其他模式的关系"></a>与其他模式的关系</h3><ul>
<li>责任链的管理者可使用命令模式实现。在这种情况下，你可以对由请求代表的同一个上下文对象执行许多不同的操作。还有另外一种实现方式，那就是请求自身就是一个命令对象。在这种情况下，你可以对由一系列不同上下文连接而成的链执行相同的操作。</li>
<li>可以同时使用命令和备忘录模式来实现“撤销”。在这种情况下，命令用于对目标对象执行各种不同的操作，备忘录用来保存一条命令执行前该对象的状态。</li>
<li>命令和策略模式看上去很像，因为两者都能通过某些行为来参数化对象。但是，它们的意图有非常大的不同。</li>
<li>你可以使用命令来将任何操作转换为对象。操作的参数将成为对象的成员变量。你可以通过转换来延迟操作的执行、将操作放入队列、保存历史命令或者向远程服务发送命令等。</li>
<li>策略通常可用于描述完成某件事的不同方式，让你能够在同一个上下文类中切换算法。</li>
<li>原型模式可用于保存命令的历史记录。</li>
<li>你可以将访问者模式视为命令模式的加强版本，其对象可对不同类的多种对象执行操作。</li>
</ul>
]]></content>
      <categories>
        <category>面向对象</category>
        <category>设计模式</category>
        <category>行为模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>连接发送者和接收者</tag>
      </tags>
  </entry>
</search>
